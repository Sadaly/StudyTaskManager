// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyTaskManager.Persistence;

#nullable disable

namespace StudyTaskManager.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupGroupRole", b =>
                {
                    b.Property<Guid>("GroupRolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupRolesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("GroupGroupRole");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupChat", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChatMessage", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Ordinal")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Context");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupChatId", "Ordinal");

                    b.HasIndex("SenderId");

                    b.ToTable("GroupChatMessage", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChatParticipant", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupChatParticipant", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChatParticipantLastRead", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("LastReadMessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("GroupChatId", "UserId", "LastReadMessageId");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupChatId", "LastReadMessageId");

                    b.ToTable("GroupChatParticipantLastRead", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("DefaultRoleId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.GroupInvite", b =>
                {
                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("InvitationAccepted")
                        .HasColumnType("bit");

                    b.HasKey("SenderId", "ReceiverId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("GroupInvite", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanChangeTaskUpdates")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreateTaskUpdates")
                        .HasColumnType("bit");

                    b.Property<bool>("CanCreateTasks")
                        .HasColumnType("bit");

                    b.Property<bool>("CanInviteUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageRoles")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupRole", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Task.GroupTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HeadLine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HeadLine");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("GroupTask", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Task.GroupTaskStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBeUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupTaskStatus", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Task.GroupTaskUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TaskId");

                    b.ToTable("GroupTaskUpdate", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.UserInGroup", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "GroupId", "RoleId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserInGroup", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Log.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LogActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("LogActionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Log.LogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogAction", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.BlockedUserInfo", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrevRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("PrevRoleId");

                    b.ToTable("BlockedUserInfo", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.Chat.PersonalChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("PersonalChat", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.Chat.PersonalMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<bool>("Is_Read_By_Other_User")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonalChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonalChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("PersonalMessage", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.SystemRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBlockUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("CanChangeSystemRoles")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteChats")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewPeoplesGroups")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("SystemRole", (string)null);
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid?>("SystemRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("SystemRoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GroupGroupRole", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.GroupRole", null)
                        .WithMany()
                        .HasForeignKey("GroupRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChat", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChatMessage", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Chat.GroupChat", "GroupChat")
                        .WithMany("GroupChatMessages")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChatParticipant", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Chat.GroupChat", "GroupChat")
                        .WithMany("GroupChatParticipants")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChatParticipantLastRead", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Chat.GroupChat", "GroupChat")
                        .WithMany()
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Chat.GroupChatMessage", "ReadMessage")
                        .WithMany()
                        .HasForeignKey("GroupChatId", "LastReadMessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("ReadMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Group", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.GroupRole", "DefaultRole")
                        .WithMany()
                        .HasForeignKey("DefaultRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultRole");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.GroupInvite", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", "Group")
                        .WithMany("GroupInvites")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.GroupRole", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Task.GroupTask", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Task.GroupTask", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Task.GroupTaskStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Group");

                    b.Navigation("Parent");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Task.GroupTaskStatus", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Task.GroupTaskUpdate", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Task.GroupTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.UserInGroup", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", "Group")
                        .WithMany("UsersInGroup")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.Group.GroupRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Log.Log", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId");

                    b.HasOne("StudyTaskManager.Domain.Entity.Log.LogAction", "LogAction")
                        .WithMany()
                        .HasForeignKey("LogActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("Group");

                    b.Navigation("Initiator");

                    b.Navigation("LogAction");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.BlockedUserInfo", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.User.SystemRole", "PrevRole")
                        .WithMany()
                        .HasForeignKey("PrevRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "User")
                        .WithOne()
                        .HasForeignKey("StudyTaskManager.Domain.Entity.User.BlockedUserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrevRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.Chat.PersonalChat", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "User1")
                        .WithMany("PersonalChatsAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "User2")
                        .WithMany("PersonalChatsAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.Chat.PersonalMessage", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.User.Chat.PersonalChat", "PersonalChat")
                        .WithMany("Messages")
                        .HasForeignKey("PersonalChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyTaskManager.Domain.Entity.User.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalChat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.User", b =>
                {
                    b.HasOne("StudyTaskManager.Domain.Entity.User.SystemRole", "SystemRole")
                        .WithMany()
                        .HasForeignKey("SystemRoleId");

                    b.Navigation("SystemRole");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Chat.GroupChat", b =>
                {
                    b.Navigation("GroupChatMessages");

                    b.Navigation("GroupChatParticipants");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.Group.Group", b =>
                {
                    b.Navigation("GroupInvites");

                    b.Navigation("UsersInGroup");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.Chat.PersonalChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("StudyTaskManager.Domain.Entity.User.User", b =>
                {
                    b.Navigation("PersonalChatsAsUser1");

                    b.Navigation("PersonalChatsAsUser2");
                });
#pragma warning restore 612, 618
        }
    }
}
